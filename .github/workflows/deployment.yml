name: Deployment

env:
  GCP_PROJECT_ID: "gcp-ml-172005"
  GKE_CLUSTER: "tfs-cluster"
  GKE_REGION: "us-central1"
  GKE_DEPLOYMENT: "tfs-server"
  BASE_IMAGE: "gcr.io/gcp-ml-172005/tfs-resnet-cpu-opt"
  MODEL_NAME: "resnet"
  
on:
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git
        uses: actions/checkout@v2
        
      - name: GCP auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Docker auth
        run: |-
          gcloud --quiet auth configure-docker
      
      - name: GKE auth
        run: |-
          gcloud container clusters get-credentials tfs-cluster --zone us-central1-c --project gcp-ml-172005
          
#         uses: google-github-actions/get-gke-credentials@v0
#         with:
#           cluster_name: ${{ env.GKE_CLUSTER }}
#           location: ${{ env.GKE_REGION }}
          
      - name: Download the latest model release
        uses: robinraju/release-downloader@v1.3
        with:
          repository: "deep-diver/ml-deployment-k8s-tfserving"
          latest: true
          fileName: "saved_model.tar.gz"
          
      - name: Extract the SavedModel
        run: |
          mkdir ${{ env.MODEL_NAME }}
          tar -xvf saved_model.tar.gz --strip-components=1 --directory ${{ env.MODEL_NAME }}
    
      - name: Run the CPU optimized TFServing container
        run: |
          docker run -d --name serving_base ${{ env.BASE_IMAGE }}

      - name: Copy the custom model to the running TFServing container
        run: |
          docker cp ${{ env.MODEL_NAME }} serving_base:/models/${{ env.MODEL_NAME }}
          
      - name: Commit and push the changed running TFServing container(image)
        run: |
          export NEW_IMAGE_NAME=tfserving-${{ env.MODEL_NAME }}:latest
          export NEW_IMAGE_TAG=gcr.io/${{ env.GCP_PROJECT_ID }}/$NEW_IMAGE_NAME
          docker commit --change "ENV MODEL_NAME ${{ env.MODEL_NAME }}" serving_base $NEW_IMAGE_TAG
          docker push $NEW_IMAGE_TAG
